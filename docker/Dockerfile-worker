# Dockerfile that builds the worker only

FROM --platform=linux/amd64 node:20-slim AS base

ARG DATABASE_URL="postgresql://local@host.docker.internal:5432/openpanel?schema=public"
ENV DATABASE_URL=$DATABASE_URL

ARG REDIS_URL="redis://127.0.0.1:6379"
ENV REDIS_URL=$REDIS_URL

ENV PNPM_HOME="/pnpm"

ENV PATH="$PNPM_HOME:$PATH"

RUN corepack enable

ARG NODE_VERSION=20

RUN apt update \
    && apt install -y curl \
    && curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o n \
    && bash n $NODE_VERSION \
    && rm n \
    && npm install -g n

WORKDIR /app

COPY package.json package.json
COPY pnpm-lock.yaml pnpm-lock.yaml
COPY pnpm-workspace.yaml pnpm-workspace.yaml
COPY apps/worker/package.json apps/worker/package.json
COPY packages/db/package.json packages/db/package.json
COPY packages/queue/package.json packages/queue/package.json
COPY packages/common/package.json packages/common/package.json
COPY packages/sdk/package.json packages/sdk/package.json

# BUILD
FROM base AS build

WORKDIR /app/apps/worker
RUN pnpm install --frozen-lockfile --ignore-scripts

WORKDIR  /app
COPY apps apps
COPY packages packages
COPY tooling tooling
RUN pnpm db:codegen

WORKDIR /app/apps/worker
RUN pnpm run build

# PROD
FROM base AS prod

WORKDIR /app/apps/worker
RUN pnpm install --frozen-lockfile --prod --ignore-scripts

# FINAL
FROM base AS runner

COPY --from=build /app/package.json /app/package.json
COPY --from=prod /app/node_modules /app/node_modules
# Apps
COPY --from=build /app/apps/worker /app/apps/worker
# Apps node_modules
COPY --from=prod /app/apps/worker/node_modules /app/apps/worker/node_modules
# Packages
COPY --from=build /app/packages/db /app/packages/db
COPY --from=build /app/packages/queue /app/packages/queue
# Packages node_modules
COPY --from=prod /app/packages/db/node_modules /app/packages/db/node_modules
COPY --from=prod /app/packages/queue/node_modules /app/packages/queue/node_modules

RUN pnpm db:codegen

WORKDIR /app/apps/worker

EXPOSE 3000

CMD ["pnpm", "start"]